//查找最底层数据
	ref_ptr<Node> mainNode = osgDB::readNodeFile(nodeLinkName);

	vector<string> vecFileName;
	findBottomFile(mainNode, vecFileName);

	string parentName = "tb_partion";
	//建立总表
	createParentTb(conn, parentName);

	//创建插入触发器
	string crtTrigger = "CREATE OR REPLACE FUNCTION tb_partion_insert_trigger()\n RETURNS TRIGGER AS $$ \n BEGIN \n IF(NEW.tilename = '";

	for (int i = 0; i < vecFileName.size(); i++)
	{
		//获取分区表名称
		string tileName = getTileName(vecFileName[i]);
		replace_all(tileName, "+", "");

		//创建分区表头和索引
		createPartTb(conn, parentName, tileName);

		//添加每个分表的判断条件
		crtTrigger = crtTrigger + tileName + "') THEN \
		  INSERT INTO " + tileName + " VALUES (NEW.*); \n";

		if (i != vecFileName.size() - 1)
		{
			crtTrigger += "ELSIF ( NEW.tilename = '";
		}
		else
		{
			crtTrigger += "ELSE \n RAISE EXCEPTION \'tilename out of range. Fix the tb_partion_insert_trigger() function!'; \n END IF; \n RETURN NULL; \n END; \n $$ \n LANGUAGE plpgsql; \n";
		}

		//添加每个分表alter的触发器

		
	}

	crtTrigger += "CREATE TRIGGER insert_tb_partion_trigger\n BEFORE INSERT ON tb_partion\n FOR EACH ROW EXECUTE PROCEDURE tb_partion_insert_trigger()";

	LOG(INFO) << crtTrigger;

	//执行插入触发器
	sqler.execSQL(conn, crtTrigger.c_str());

	for (auto childName : vecFileName)
	{
		ref_ptr<Node> secNode = osgDB::readNodeFile(childName);

		if (!secNode)
		{
			continue;
		}

		//获得三角网信息
		COsgTriParser parser;
		secNode->accept(parser);
		vector<CTri> tris = parser.tris;

		if (tris.empty())
		{
			continue;;
		}

		system_clock::time_point start = system_clock::now();

		//获取分区表名称
		string tileName = getTileName(childName);
		replace_all(tileName, "+", "");

		//插入三角网信息, 往父表插入即可
		insertTriInfo(tris, conn, tileName, parentName);

		system_clock::time_point end = system_clock::now();
		duration<double, std::ratio<1, 1>> duration_s(end - start);

		double elapse = duration_s.count();

		cout << "tilename: " << tileName << "elapse time " << elapse << endl;

		//添加两个字段

	}
	
	PQfinish(conn);
